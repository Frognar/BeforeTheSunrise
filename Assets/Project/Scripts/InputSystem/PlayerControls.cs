//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Project/Settings/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fd62e94d-83c1-4286-b165-1f3499de2bb0"",
            ""actions"": [
                {
                    ""name"": ""SendCommand"",
                    ""type"": ""Button"",
                    ""id"": ""23bf4e16-14a1-474b-b80a-9ba3da3c1fc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnableCommendQueuing"",
                    ""type"": ""Button"",
                    ""id"": ""aa97e346-a200-4bdd-bf79-1c31341603f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""d73c23ae-089c-4e7b-a847-9107d23df77f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSame"",
                    ""type"": ""Button"",
                    ""id"": ""c90dbfba-d638-4fd8-8a9a-194c182b1791"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapDelay=0.35)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartSelecting"",
                    ""type"": ""Button"",
                    ""id"": ""7fcdf546-9241-4f7e-9f37-a51d30753833"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopSelecting"",
                    ""type"": ""Button"",
                    ""id"": ""3a0172d6-95e7-4099-9e3f-1b8f1fd730f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""c1b1734c-1140-4eec-b0fb-742f4bd70166"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c3df95ed-b334-46dc-8aa7-5672ba6a9173"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4e590ed-abc1-4fe1-9376-1682bc8e5470"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableCommendQueuing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f206c40-021a-4f04-810f-aa4fa17851d0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""466f65d8-c4d6-4645-88cf-6e089187a60d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b4fd832-74b6-455b-95a1-9af65974f224"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartSelecting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75ea9e1c-cde5-4399-86a7-21fbfbb984a0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopSelecting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f571fdeb-ae5a-4907-b2f3-c73f1168ea92"",
                    ""path"": ""<Keyboard>/pause"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""4fa9c010-f1d2-4c71-bce7-83aa4c660c3f"",
            ""actions"": [
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""5464a8a7-9840-448f-9f66-9a514f0c9857"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""03320fc5-8b34-4076-8478-9ed89d50ccba"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""e7fae129-cce3-4c2c-b96c-22d503da83ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotationDirection"",
                    ""type"": ""Value"",
                    ""id"": ""bbfb9165-b74e-4c8c-a8f9-19167fb7522a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnableCameraRotation"",
                    ""type"": ""Button"",
                    ""id"": ""291c9503-3aae-47aa-ae4f-f43374094915"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c5c3aacc-9843-4671-b8b0-d11fd9f1730f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46ef788c-3539-4768-87e9-d07d32218aaf"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efef31de-e6de-4887-978d-feea7e2a16fc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00856612-2f55-476e-b48c-82b3de2b4bad"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotationDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""292dcaa5-38b3-456e-86c2-21bb54f11ba2"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableCameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""c02f7617-7776-47ae-8fe6-ce99309f68bc"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""64e6f3c2-31c4-4a02-848f-d9e3010c9e6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4207d6af-8a2f-424c-9ad6-9c400943abdb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SendCommand = m_Player.FindAction("SendCommand", throwIfNotFound: true);
        m_Player_EnableCommendQueuing = m_Player.FindAction("EnableCommendQueuing", throwIfNotFound: true);
        m_Player_Cancel = m_Player.FindAction("Cancel", throwIfNotFound: true);
        m_Player_SelectSame = m_Player.FindAction("SelectSame", throwIfNotFound: true);
        m_Player_StartSelecting = m_Player.FindAction("StartSelecting", throwIfNotFound: true);
        m_Player_StopSelecting = m_Player.FindAction("StopSelecting", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Focus = m_Camera.FindAction("Focus", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        m_Camera_ScreenPosition = m_Camera.FindAction("ScreenPosition", throwIfNotFound: true);
        m_Camera_CameraRotationDirection = m_Camera.FindAction("CameraRotationDirection", throwIfNotFound: true);
        m_Camera_EnableCameraRotation = m_Camera.FindAction("EnableCameraRotation", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Close = m_Menu.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_SendCommand;
    private readonly InputAction m_Player_EnableCommendQueuing;
    private readonly InputAction m_Player_Cancel;
    private readonly InputAction m_Player_SelectSame;
    private readonly InputAction m_Player_StartSelecting;
    private readonly InputAction m_Player_StopSelecting;
    private readonly InputAction m_Player_Pause;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SendCommand => m_Wrapper.m_Player_SendCommand;
        public InputAction @EnableCommendQueuing => m_Wrapper.m_Player_EnableCommendQueuing;
        public InputAction @Cancel => m_Wrapper.m_Player_Cancel;
        public InputAction @SelectSame => m_Wrapper.m_Player_SelectSame;
        public InputAction @StartSelecting => m_Wrapper.m_Player_StartSelecting;
        public InputAction @StopSelecting => m_Wrapper.m_Player_StopSelecting;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @SendCommand.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSendCommand;
                @SendCommand.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSendCommand;
                @SendCommand.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSendCommand;
                @EnableCommendQueuing.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnableCommendQueuing;
                @EnableCommendQueuing.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnableCommendQueuing;
                @EnableCommendQueuing.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnEnableCommendQueuing;
                @Cancel.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCancel;
                @SelectSame.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectSame;
                @SelectSame.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectSame;
                @SelectSame.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSelectSame;
                @StartSelecting.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartSelecting;
                @StartSelecting.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartSelecting;
                @StartSelecting.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStartSelecting;
                @StopSelecting.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStopSelecting;
                @StopSelecting.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStopSelecting;
                @StopSelecting.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStopSelecting;
                @Pause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SendCommand.started += instance.OnSendCommand;
                @SendCommand.performed += instance.OnSendCommand;
                @SendCommand.canceled += instance.OnSendCommand;
                @EnableCommendQueuing.started += instance.OnEnableCommendQueuing;
                @EnableCommendQueuing.performed += instance.OnEnableCommendQueuing;
                @EnableCommendQueuing.canceled += instance.OnEnableCommendQueuing;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @SelectSame.started += instance.OnSelectSame;
                @SelectSame.performed += instance.OnSelectSame;
                @SelectSame.canceled += instance.OnSelectSame;
                @StartSelecting.started += instance.OnStartSelecting;
                @StartSelecting.performed += instance.OnStartSelecting;
                @StartSelecting.canceled += instance.OnStartSelecting;
                @StopSelecting.started += instance.OnStopSelecting;
                @StopSelecting.performed += instance.OnStopSelecting;
                @StopSelecting.canceled += instance.OnStopSelecting;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Focus;
    private readonly InputAction m_Camera_Zoom;
    private readonly InputAction m_Camera_ScreenPosition;
    private readonly InputAction m_Camera_CameraRotationDirection;
    private readonly InputAction m_Camera_EnableCameraRotation;
    public struct CameraActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Focus => m_Wrapper.m_Camera_Focus;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputAction @ScreenPosition => m_Wrapper.m_Camera_ScreenPosition;
        public InputAction @CameraRotationDirection => m_Wrapper.m_Camera_CameraRotationDirection;
        public InputAction @EnableCameraRotation => m_Wrapper.m_Camera_EnableCameraRotation;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Focus.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocus;
                @Focus.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocus;
                @Focus.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocus;
                @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @ScreenPosition.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnScreenPosition;
                @ScreenPosition.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnScreenPosition;
                @ScreenPosition.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnScreenPosition;
                @CameraRotationDirection.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotationDirection;
                @CameraRotationDirection.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotationDirection;
                @CameraRotationDirection.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCameraRotationDirection;
                @EnableCameraRotation.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnEnableCameraRotation;
                @EnableCameraRotation.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnEnableCameraRotation;
                @EnableCameraRotation.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnEnableCameraRotation;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Focus.started += instance.OnFocus;
                @Focus.performed += instance.OnFocus;
                @Focus.canceled += instance.OnFocus;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @ScreenPosition.started += instance.OnScreenPosition;
                @ScreenPosition.performed += instance.OnScreenPosition;
                @ScreenPosition.canceled += instance.OnScreenPosition;
                @CameraRotationDirection.started += instance.OnCameraRotationDirection;
                @CameraRotationDirection.performed += instance.OnCameraRotationDirection;
                @CameraRotationDirection.canceled += instance.OnCameraRotationDirection;
                @EnableCameraRotation.started += instance.OnEnableCameraRotation;
                @EnableCameraRotation.performed += instance.OnEnableCameraRotation;
                @EnableCameraRotation.canceled += instance.OnEnableCameraRotation;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Close;
    public struct MenuActions
    {
        private @PlayerControls m_Wrapper;
        public MenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Menu_Close;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Close.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnClose;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IPlayerActions
    {
        void OnSendCommand(InputAction.CallbackContext context);
        void OnEnableCommendQueuing(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnSelectSame(InputAction.CallbackContext context);
        void OnStartSelecting(InputAction.CallbackContext context);
        void OnStopSelecting(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnFocus(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnScreenPosition(InputAction.CallbackContext context);
        void OnCameraRotationDirection(InputAction.CallbackContext context);
        void OnEnableCameraRotation(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
}
